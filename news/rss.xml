<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Wire Cell News</title><link>http://wirecell.github.io/news/</link><description>Updates on the Wire Cell Toolkit.</description><atom:link type="application/rss+xml" href="http://wirecell.github.io/news/rss.xml" rel="self"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:bv@bnl.gov"&gt;Wire Cell Team&lt;/a&gt; </copyright><lastBuildDate>Fri, 17 Aug 2018 14:16:41 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Singularity Containers for WCT and WC/LS Running and Development</title><link>http://wirecell.github.io/news/posts/singularity-containers-for-wct-and-wcls-running-and-development/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
As part of an enjoyable tutorial on applying machine learning
techniques to LArTPC given by &lt;a href="http://www.codingkazu.com/"&gt;Kazu&lt;/a&gt; at BNL we were introduced to
&lt;a href="https://www.sylabs.io/"&gt;Singularity containers&lt;/a&gt;.  There's been some WCT-related work in the
past using Docker containers but that fizzled due to Docker's
complexity and usage barrier (even if that leads to better build
performance and features).  It was immediately clear from Kazu's
tutorial that Singularity reduces the usage barrier and would solve a
big problem for the WCT team.  Namely the difficulties we have in
building FNAL's &lt;i&gt;art&lt;/i&gt; and LArSoft (LS) software ecosystem on our
computers.  With Singularity containers we now have a way for just one
person to suffer and let many others benefit.  
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/singularity-containers-for-wct-and-wcls-running-and-development/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>build</category><category>devel</category><category>larsoft</category><guid>http://wirecell.github.io/news/posts/singularity-containers-for-wct-and-wcls-running-and-development/</guid><pubDate>Fri, 17 Aug 2018 13:30:33 GMT</pubDate></item><item><title>Overriding Configuration Parameters</title><link>http://wirecell.github.io/news/posts/overriding-configuration-parameters/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
The WCT configuration language Jsonnet allows to exploit software development patterns such as "don't repeat yourself" (DRY) and object inheritance.  They are exploited to factor a configuration into layers so that it may, in total, serve many uses.  This post describes how to override a parameter from a base object.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/overriding-configuration-parameters/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>uboone</category><guid>http://wirecell.github.io/news/posts/overriding-configuration-parameters/</guid><pubDate>Wed, 15 Aug 2018 13:38:32 GMT</pubDate></item><item><title>Default Config Dumper</title><link>http://wirecell.github.io/news/posts/default-config-dumper/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
WCT is very configurable.  It provides a way for the expert that wrote
the C++ component to provide sane defaults and a way that a user may
override or augment those defaults.  WCT helps such intrepid users to
discover the defaults with the &lt;code&gt;ConfigDumper&lt;/code&gt; WCT app component.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/default-config-dumper/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cli</category><category>config</category><guid>http://wirecell.github.io/news/posts/default-config-dumper/</guid><pubDate>Thu, 05 Jul 2018 13:15:44 GMT</pubDate></item><item><title>Response Refactoring</title><link>http://wirecell.github.io/news/posts/response-refactoring/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
In WCT we try to follow the mantra "everything is a component".  One
corollary to that is we try to avoid hard-wiring dependencies by
having functionality accessed by hard-wired construction of concrete
classes.  The various classes having to do with responses suffered
from not being available as components.  This led to the entire
toolkit having hard-wired behavior which hampers support for multiple
detectors.  This post describes some recent steps to fix this problem.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/response-refactoring/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>dfp</category><category>graph</category><category>simulation</category><guid>http://wirecell.github.io/news/posts/response-refactoring/</guid><pubDate>Tue, 03 Jul 2018 22:59:30 GMT</pubDate></item><item><title>Pgrapher Configuration Improvements</title><link>http://wirecell.github.io/news/posts/pgrapher-configuration-improvements/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
A powerful new idiom has been developed to simplify developing Jsonnet
configuration files for Wire-Cell toolkit's Pgrapher app component.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/pgrapher-configuration-improvements/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>dfp</category><category>graph</category><category>simulation</category><guid>http://wirecell.github.io/news/posts/pgrapher-configuration-improvements/</guid><pubDate>Fri, 29 Jun 2018 18:33:44 GMT</pubDate></item><item><title>Pgrapher Execution Engine</title><link>http://wirecell.github.io/news/posts/pgrapher-execution-engine/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
The Wire Cell Toolkit is based on functional components which can be
used as arbitrary "tools" (in the Gaudi sense of the word).  But, they
can also composed together following the paradigm of &lt;i&gt;data flow
programming&lt;/i&gt; (DFP).  Each component thus becomes a node (aka "vertex")
in a graph joined to other nodes via edges that represent the transfer
of data from an output port of one to the input port of the other.  A
new way to perform this execution has been added to WCT in the form of
the Pgrapher app.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/pgrapher-execution-engine/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>dfp</category><category>graph</category><guid>http://wirecell.github.io/news/posts/pgrapher-execution-engine/</guid><pubDate>Fri, 22 Jun 2018 19:16:42 GMT</pubDate></item><item><title>Simulation updates</title><link>http://wirecell.github.io/news/posts/simulation-updates/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
Despite the lack of news updates, there's been a lot of activity.  Hopefully more posts will follow to catch up.  For now, some news about WCT simulation.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/simulation-updates/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>gen</category><guid>http://wirecell.github.io/news/posts/simulation-updates/</guid><pubDate>Tue, 19 Jun 2018 14:33:08 GMT</pubDate></item><item><title>Signal processing now in component form</title><link>http://wirecell.github.io/news/posts/signal-processing-now-in-component-form/</link><dc:creator>Brett Viren</dc:creator><description>&lt;div&gt;&lt;p&gt;
Following in the footsteps of the recently announced porting of its functionality from the prototype to the toolkit the &lt;b&gt;signal processing&lt;/b&gt;, is now usable in the form of WCT &lt;b&gt;components&lt;/b&gt;. This is important as it paves the way to embedding the signal processing in other applications or frameworks, notably LArSoft.  
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wirecell.github.io/news/posts/signal-processing-now-in-component-form/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>config</category><category>devel</category><category>sigproc</category><category>user</category><guid>http://wirecell.github.io/news/posts/signal-processing-now-in-component-form/</guid><pubDate>Mon, 10 Jul 2017 22:16:43 GMT</pubDate></item><item><title>Porting and Integration Begun</title><link>http://wirecell.github.io/news/posts/porting-and-integration-begun/</link><dc:creator>Brett Viren</dc:creator><description>&lt;p&gt;
Xin concluded an intense effort to port the prototype &lt;a href="https://github.com/WireCell/wire-cell-sigproc"&gt;signal processing code into the toolkit&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
With hints from Lynn Garren (FNAL) a &lt;a href="https://github.com/brettviren/larwirecell/blob/feature/integration/larwirecell/integration.org#set-larwirecell-environment"&gt;method&lt;/a&gt; to set up an environment where both WCT and its LArSoft integration package (&lt;code&gt;larwirecell&lt;/code&gt;) can be simultaneously developed.
&lt;/p&gt;</description><category>build</category><category>devel</category><category>larsoft</category><guid>http://wirecell.github.io/news/posts/porting-and-integration-begun/</guid><pubDate>Mon, 03 Jul 2017 19:20:25 GMT</pubDate></item><item><title>New Configuration Data Package</title><link>http://wirecell.github.io/news/posts/new-configuration-data-package/</link><dc:creator>Brett Viren</dc:creator><description>&lt;p&gt;
Today a new package joins the WCT family.  
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/WireCell/wire-cell-data"&gt;https://github.com/WireCell/wire-cell-data&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This collects the "configuration data" files which are needed for
input to WCT.  These are generally compressed JSON files which have
been converted to a WCT standard format from a variety of sources.
The data includes wire geometry, field response, noise spectra and a
couple initial deposition files.  
&lt;/p&gt;

&lt;p&gt;
Having this repository makes it easier for users to prepare to run
WCT.  At some point in the future this package may be installed along
with the code, but for now, users need to clone this repo.  For WCT to
locate these files the produced directory needs to be added to the
user's &lt;code&gt;WIRECELL_PATH&lt;/code&gt; environment variable.
&lt;/p&gt;

&lt;p&gt;
See the &lt;a href="https://github.com/WireCell/wire-cell-data/blob/master/README.org"&gt;README&lt;/a&gt; file for details including a summary of the files
available and commands to remake these files from their upstream
sources.
&lt;/p&gt;

&lt;p&gt;
Previously this data was kept online &lt;a href="http://www.phy.bnl.gov/~bviren/tmp/wctsim/wct-dev/share/wirecell/data/"&gt;in a directory&lt;/a&gt; dump.  That's
still there for now.  It includes some files not added to GitHub.  In
particular the "upstream" data from which the JSON files are converted
(eg, the Garfield output) can be found.  And next door to that
directory is a &lt;a href="http://www.phy.bnl.gov/~bviren/tmp/wctsim/wct-dev/share/wirecell/plots/"&gt;plot dump directory&lt;/a&gt; which contains some diagnostic
plots related to the conversion of these files which may be useful for
experts to browse.
&lt;/p&gt;</description><category>build</category><category>config</category><category>devel</category><guid>http://wirecell.github.io/news/posts/new-configuration-data-package/</guid><pubDate>Fri, 23 Jun 2017 19:18:19 GMT</pubDate></item></channel></rss>